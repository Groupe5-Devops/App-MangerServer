pipeline {
    agent any

    environment {
        GCP_PROJECT_ID = 'citric-period-433211-i6'
        ARTIFACT_REPO_NAME = 'appmanagercr'
        REGION = 'us-central1' 
        BACK_DOCKER_IMAGE = "${REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REPO_NAME}/servermanagerback:1.${env.BUILD_NUMBER}"
        FRONT_DOCKER_IMAGE = "${REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REPO_NAME}/servermanagerfront:1.${env.BUILD_NUMBER}"
        GCP_CREDENTIALS_ID = 'gcrToken' 
        SLACK_CHANNEL = '#pipeline_succes'
    }

    stages {
        
        stage('Checkout') {
            steps {
                // git branch: 'dev', url: 'https://github.com/Groupe5-Devops/App-MangerServer.git'
                checkout scm
            }
        }
        
        stage('Determine Changes') {
            steps {
                script {
                    // Get the list of changed files in the last commit
                    def changes = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()
                    echo "Changed files:\n${changes}"
                    env.BUILD_FRONTEND = changes.contains('Server-UI-Frontend/')
                    env.BUILD_BACKEND = changes.contains('Server-API-Backend/')
                    echo "BUILD_FRONTEND=${env.BUILD_FRONTEND}"
                    echo "BUILD_BACKEND=${env.BUILD_BACKEND}"
                }
            }
        }
        
        // stage('code analyse if backend changed') {
        //     when {
        //         expression { env.BUILD_BACKEND == 'true' }
        //     }
        //     steps {
        //         script {
        //             // Build the Docker image for the backend
        //             echo "backend"
        //             dir('Server-API-Backend'){
        //                 withCredentials([string(credentialsId: 'sonarAdmin', variable: 'SONAR_TOKEN')]) { 
        //                     withMaven{
        //                         sh 'mvn clean package sonar:sonar -Dsonar.host.url=http://localhost:9001/ -Dsonar.login=${SONAR_TOKEN}'
        //                     } 
        //                 }
        //             }
        //         }
        //     }
        // }
        
        stage('code analyse if frontend changed') {
            when {
                expression { env.BUILD_FRONTEND == 'true' }
            }
            steps {
                script {
                    // Build the Docker image for the backend
                    echo "frontend"
                }
            }
        }
        
        stage('Build back image if backend changed') {
            when {
                expression { env.BUILD_BACKEND == 'true' }
            }
            steps {
                script {
                    // Build the Docker image for the backend
                    echo "backend"
                    dir('Server-API-Backend'){
                        docker.build("${BACK_DOCKER_IMAGE}")
                    }
                }
            }
        }
        
        stage('Build front image if frontend changed') {
            when {
                expression { env.BUILD_FRONTEND == 'true' }
            }
            steps {
                script {
                    // Build the Docker image for the backend
                    echo "backend"
                    dir('Server-UI-Frontend'){
                        docker.build("${FRONT_DOCKER_IMAGE}")
                    }
                }
            }
        }
        
        stage('Push Images') {
            when {
                anyOf {
                    expression { env.BUILD_FRONTEND == 'true' }
                    expression { env.BUILD_BACKEND == 'true' }
                }
            }
            steps {
                script {
                    withCredentials([file(credentialsId: env.GCP_CREDENTIALS_ID, variable: 'GCP_KEY_FILE')]) {
                        sh 'gcloud auth activate-service-account --key-file=${GCP_KEY_FILE}'
                        sh 'gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet'
                    }
                    // Push the images to your Docker registry
                    if (env.BUILD_FRONTEND == 'true') {
                        // sh 'docker push your-frontend-image:${BUILD_NUMBER}'
                        docker.image("${FRONT_DOCKER_IMAGE}").push()

                    }
                    if (env.BUILD_BACKEND == 'true') {
                        // sh 'docker push your-backend-image:${BUILD_NUMBER}'
                        docker.image("${BACK_DOCKER_IMAGE}").push()

                    }
                }
            }
        }
        
        stage('Trigger Update Manifest Pipeline') {
            steps {
                script {
                    build job: 'scrappingmanifest', parameters: [
                        string(name: 'DOCKERTAG', value: "1.${BUILD_NUMBER}"),
                        booleanParam(name: 'BUILD_BACKEND', value: env.BUILD_BACKEND == 'true'),
                        booleanParam(name: 'BUILD_FRONTEND', value: env.BUILD_FRONTEND == 'true')
                    ]
                }
            }
        }




        // stage('Build Docker Image') {
        //     steps {
        //         script {
        //             docker.build("${DOCKER_IMAGE}")
        //         }
        //     }
        // }

        // stage('Authenticate with GCP') {
        //     steps {
        //         withCredentials([file(credentialsId: env.GCP_CREDENTIALS_ID, variable: 'GCP_KEY_FILE')]) {
        //             sh 'gcloud auth activate-service-account --key-file=${GCP_KEY_FILE}'
        //             sh 'gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet'
        //         }
        //     }
        // }

        // stage('Push Docker Image') {
        //     steps {
        //         script {
        //             docker.image("${DOCKER_IMAGE}").push()
        //         }
        //     }
        // }
     }

    post {
        always {
            cleanWs()
        }
        success {
            slackSend channel: SLACK_CHANNEL, color: 'good', message: "Pipeline succeeded: ${env.JOB_NAME} ${env.BUILD_NUMBER}"
        }
        failure {
            slackSend channel: SLACK_CHANNEL, color: 'danger', message: "Pipeline failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}"
        }
    }
}

// TAGH=$(gcloud artifacts docker tags list us-central1-docker.pkg.dev/citric-period-433211-i6/appmanagercr/servermanagerback --sort-by=~CREATE_TIME --limit=1 --format="value(TAG)")
// Listing items under project citric-period-433211-i6, location us-central1, repository appmanagercr.

